CREATE DATABASE IF NOT EXISTS calendarDatabase;
USE calendarDatabase;

CREATE TABLE user (
    username VARCHAR(32) NOT NULL,
    password VARCHAR(32) NOT NULL,
    name VARCHAR(32) NOT NULL,
    type TINYTEXT,
    PRIMARY KEY (username)
);

CREATE TABLE groups (
    groupID INT NOT NULL AUTO_INCREMENT,
    groupname VARCHAR(32) NOT NULL,
    description TINYTEXT,
    PRIMARY KEY (groupID)
);

CREATE TABLE event (
    eventID INT NOT NULL AUTO_INCREMENT,
    startDateTime DATETIME NOT NULL,
    endDateTime DATETIME NOT NULL,
    location VARCHAR(32),
    description TINYTEXT,
    isMeeting BIT(1) NOT NULL,
    PRIMARY KEY (eventID)
);

CREATE TABLE room (
    roomID INT NOT NULL AUTO_INCREMENT,
    size INT,
    description TINYTEXT,
    PRIMARY KEY (roomID)
);

CREATE TABLE alarm (
    time TIME NOT NULL,
    message TINYTEXT,
    username VARCHAR(32) NOT NULL,
    eventID INT NOT NULL,
    FOREIGN KEY (username) 
        REFERENCES user(username)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    FOREIGN KEY (eventID)
        REFERENCES event(eventID)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    PRIMARY KEY (username, eventID)
);

CREATE TABLE notification (
    notificationID INT NOT NULL AUTO_INCREMENT,
    description TINYTEXT,
    PRIMARY KEY (notificationID)
);

CREATE TABLE isMemberOf (
    username VARCHAR(32) NOT NULL,
    groupID INT NOT NULL,
    FOREIGN KEY (username) 
        REFERENCES user(username)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    FOREIGN KEY (groupID)
        REFERENCES groups(groupID)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    PRIMARY KEY (username, groupID)
);

CREATE TABLE isOwner (
    username VARCHAR(32) NOT NULL,
    eventID INT NOT NULL,
    FOREIGN KEY (username)
        REFERENCES user(username)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    FOREIGN KEY (eventID)
        REFERENCES event(eventID)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    PRIMARY KEY (username, eventID)
);

CREATE TABLE notificationTo (
    username VARCHAR(32) NOT NULL,
    notificationID INT NOT NULL,
    FOREIGN KEY (username)
        REFERENCES user(username)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    FOREIGN KEY (notificationID)
        REFERENCES notification(notificationID)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    PRIMARY KEY (username, notificationID)
);

CREATE TABLE notificationForEvent (
    notificationID INT NOT NULL,
    eventID INT NOT NULL,
    FOREIGN KEY (notificationID)
        REFERENCES notification(notificationID)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    FOREIGN KEY (eventID)
        REFERENCES event(eventID)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    PRIMARY KEY (notificationID, eventID)
);

CREATE TABLE reservedRoom (
    eventID INT NOT NULL,
    roomID INT NOT NULL,
    FOREIGN KEY (eventID)
        REFERENCES event(eventID)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    FOREIGN KEY (roomID)
        REFERENCES room(roomID)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    PRIMARY KEY (eventID, roomID)
);

CREATE TABLE isParticipant (
    username VARCHAR(32) NOT NULL,
    eventID INT NOT NULL,
    status INT NOT NULL,
    FOREIGN KEY (username)
        REFERENCES user(username)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    FOREIGN KEY (eventID)
        REFERENCES event(eventID)
        ON UPDATE CASCADE
        ON DELETE CASCADE,
    PRIMARY KEY (username, eventID)
);

